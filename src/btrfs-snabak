#!/usr/bin/env python3

import socket
import json
import argparse
import sys
from snabak_modules.constants import *


def terminate(code, message):
    print(message)
    sys.exit(code)


def call_daemon(command):
    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(UNIX_SOCKET)
        cmd_json = json.dumps(command) + chr(0)
        sock.sendall(cmd_json.encode())

        # wait for the answer
        reply = ''
        while True:
            buf = sock.recv(4096).decode()
            reply += buf
            if buf == "":
                sock.close()
                break

        try:
            r = json.loads(reply)
            terminate(r["exit_code"], r["message"])

        except (json.JSONDecodeError, KeyError):
            terminate(ERR_DAEMON, f"could not parse daemon reply: '{reply}'")

    except FileNotFoundError:
        terminate(ERR_DAEMON, f"could not find '{UNIX_SOCKET}', is the daemon not running?")

    except ConnectionRefusedError:
        terminate(ERR_DAEMON, "the socket is there but the daemon refuses to connect, did it crash?")

    except PermissionError:
        terminate(ERR_DAEMON, f"permission denied when trying to connect to socket '{UNIX_SOCKET}'")


def cmd_snapshot(args):
    if len(args.config) > 0:
        cmd = dict(cmd='sn', config=args.config)
        call_daemon(cmd)

    else:
        terminate(
            ERR_USAGE,
            'Please specify at least one configuration name.\n' +
            'Available configurations are:\n' +
            '  FIXME: not implemented!'
        )


def cmd_backup(_args):
    terminate(ERR_NOT_IMPLEMENTED, 'backup not yet implemented')


def cmd_list(_args):
    terminate(ERR_NOT_IMPLEMENTED, 'list not yet implemented')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(epilog="help for individual commands: btrfs-snabak <command> --help")
    subparsers = parser.add_subparsers(dest='command', title='command')
    subparsers.required = True

    parser_sn = subparsers.add_parser('sn', aliases=['snapshot'], help='create snapshot')
    parser_sn.add_argument('config', nargs='*', help='configuration name')
    parser_sn.set_defaults(func=cmd_snapshot)

    parser_ba = subparsers.add_parser('ba', aliases=['backup'], help='create backup')
    parser_ba.add_argument('config', nargs='*', help='configuration name')
    parser_ba.set_defaults(func=cmd_backup)

    parser_li = subparsers.add_parser('li', aliases=['list'], help='list snapshots or backups')
    parser_li.add_argument('config', nargs='*', help='configuration name')
    parser_li.set_defaults(func=cmd_list)

    arguments = parser.parse_args()
    arguments.func(arguments)
