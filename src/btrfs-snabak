#!/usr/bin/env python3

import socket
import json
import argparse

UNIX_SOCKET = "/var/run/btrfs-snabak.sock"


def call_daemon(command):
    code = 0
    message = ''
    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(UNIX_SOCKET)
        cmd_json = json.dumps(command) + chr(0)
        sock.sendall(cmd_json.encode())

        # wait for the answer
        reply = ''
        while True:
            b = sock.recv(1).decode()
            if b == "":
                break
            if b == chr(0):
                break
            reply += b

        sock.close()

        try:
            r = json.loads(reply)
            message = r["message"]
            code = r["exit_code"]

        except:
            print(f"could not parse daemon reply: '{reply}'")
            code = 255

    except FileNotFoundError:
        print(f"could not find '{UNIX_SOCKET}', is the daemon not running?")

    except ConnectionRefusedError:
        print("the socket is there but the daemon refuses to connect, did it crash?")

    except PermissionError:
        print(f"permission denied when trying to connect to socket '{UNIX_SOCKET}'")

    print(message)
    exit(code)


def cmd_snapshot(args):
    if len(args.config) > 0:
        cmd = dict(cmd='sn', config=args.config)
        call_daemon(cmd)

    else:
        print('Please specify at least one configuration name.')
        print('Available configurations are:')
        print('  FIXME: not implemented!')


def cmd_backup(args):
    print('backup not yet implemented')


def cmd_list(args):
    print('list not yet implemented')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(epilog="help for individual commands: btrfs-snabak <command> --help")
    subparsers = parser.add_subparsers(dest='command', title='command')
    subparsers.required = True

    parser_sn = subparsers.add_parser('sn', aliases=['snapshot'], help='create snapshot')
    parser_sn.add_argument('config', nargs='*', help='configuration name')
    parser_sn.set_defaults(func=cmd_snapshot)

    parser_ba = subparsers.add_parser('ba', aliases=['backup'], help='create backup')
    parser_ba.add_argument('config', nargs='*', help='configuration name')
    parser_ba.set_defaults(func=cmd_backup)

    parser_li = subparsers.add_parser('li', aliases=['list'], help='list snapshots or backups')
    parser_li.add_argument('config', nargs='*', help='configuration name')
    parser_li.set_defaults(func=cmd_list)

    arguments = parser.parse_args()
    arguments.func(arguments)
