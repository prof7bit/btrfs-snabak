#!/usr/bin/env python3

import os
import sys
import signal
import struct
import socket
import pwd
import grp
import json
import traceback


UNIX_SOCKET = "/var/run/btrfs-snabak.sock"
UNIX_SOCKET_PERMS = 0o666


class ClientConnection:
    def __init__(self, connection):
        self.conn = connection
        creds = connection.getsockopt(socket.SOL_SOCKET, socket.SO_PEERCRED, struct.calcsize('3i'))
        self.pid, self.uid, self.gid = struct.unpack('3i', creds)
        self.username = pwd.getpwuid(self.uid).pw_name

    def cmd_snapshot(self, args):
        r = ''
        for config in args["config"]:
            r += f'snapshotting {config} FIXME: implement this!\n'
        self.reply(0, r)

    def parse_command(self, command_json):
        args = json.loads(command_json)
        cmd = args["cmd"]

        if cmd == 'sn':
            self.cmd_snapshot(args)
        else:
            self.reply(1, f'unknown command: {cmd}')

    def reply(self, exit_code, message):
        r = json.dumps({'exit_code': exit_code, 'message': message}) + chr(0)
        self.conn.sendall(r.encode())

    def is_allowed(self, users, groups):
        if self.username in users.split(','):
            return True

        for group in groups.split(','):
            if self.username in grp.getgrnam(group).gr_mem:
                return True

        return False

    def handle(self):
        try:
            argv_json = ''
            while True:
                b = self.conn.recv(1).decode()
                if b == '':  # disconnect
                    if argv_json != '':
                        self.parse_command(argv_json)
                    break
                elif b == chr(0):
                    self.parse_command(argv_json)
                    argv_json = ''
                else:
                    argv_json += b

        except:
            self.reply(1, "the daemon encountered the following exception:\n\n" +
                       f"{traceback.format_exc()}\nthis is a bug, please report it.")

    def close(self):
        self.conn.close()


def terminate(signum, _frame):
    print(f"\nreceived signal: {signum}")
    raise KeyboardInterrupt()


def remove_socket():
    try:
        os.unlink(UNIX_SOCKET)
    except OSError:
        if os.path.exists(UNIX_SOCKET):
            raise


if __name__ == '__main__':
    remove_socket()
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(UNIX_SOCKET)
    os.chmod(UNIX_SOCKET, UNIX_SOCKET_PERMS)
    sock.listen(1)
    signal.signal(signal.SIGTERM, terminate)
    signal.signal(signal.SIGINT, terminate)
    print(f'listening on {UNIX_SOCKET}')
    try:
        while True:
            conn, client = sock.accept()
            c = ClientConnection(conn)
            c.handle()
            c.close()
            sys.stdout.flush()
            sys.stderr.flush()

    except KeyboardInterrupt:
        pass

    finally:
        sock.close()
        remove_socket()
        print('terminated')
